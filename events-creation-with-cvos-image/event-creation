#!/usr/bin/python

import sys
import time
import json
import logging
import requests
from datetime import datetime
from logging.handlers import TimedRotatingFileHandler
import os
import base64
from PIL import Image, ImageEnhance
import io
import uuid


# configure logging
logFile = './post_image.log'

# read arguments
logger = logging.getLogger('Rotating Log')
logFormatter = logging.Formatter('%(asctime)s [%(threadName)-12.12s] [%(levelname)-5.5s] %(message)s')
# configure file logging
fileHandler = TimedRotatingFileHandler(logFile, when='d', interval=1, backupCount=14)
fileHandler.setFormatter(logFormatter)
logger.addHandler(fileHandler)
# configure console logging
consoleHandler = logging.StreamHandler()
consoleHandler.setFormatter(logFormatter)
logger.addHandler(consoleHandler)

# set logging level
logger.setLevel(logging.INFO)
# uncomment to enable debug
#logger.setLevel(logging.DEBUG)
logger.info('')


#default setup
startTime = int(time.time() * 1000)
endTime = int((time.time() + 3 ) * 1000)
user_id = 'gpaolilofaria'
password = 'movix@2341'
directory = 'main'
eventId = str(uuid.uuid4())
header_data = {}
header_json = {}

#COVI URL
base_url = 'https://covi.real.com{0}'
url= base_url.format("/people?insert=false&update=false&merge=false")
url= url + "&detect-age=true&detect-gender=true&detect-sentiment=true"
url= url + "&X-RPC-FACES-DETECT-THRESHOLD=0&X-RPC-MIN-SIZE=120"
#Create event
url= url + "&event=any&site=PY&source=py_script&start-time=" + str(startTime) + "&end-time=" + str(endTime) + "&context=media&event-id=" + eventId

#CVOS URL
base_url_cvos= 'https://cvos.real.com/obj/'
url_cvos = base_url_cvos + base64.b64encode(eventId.encode("utf-8")).decode("utf-8") + "/face"
#Event server URL
base_url_event= 'https://cv-event.real.com/'
url_get = base_url_event + "events?sinceTime=0&eventId=" + eventId


def checkimage():
    if len(sys.argv) <= 1:
        print ('Please check image path has been informed properly')
        sys.exit(1)
	#If specific personId given
    if (len(sys.argv) > 1):
        image_path = sys.argv[1]
        #JPEG name
        global image_filename
        global upload_file
        image_filename = os.path.basename(image_path)
        upload_file=open(image_filename, 'rb')
		


def createHeaders(user_id, password, directory):
    enconding = 'utf-8'
    encode_password =  base64.b64encode(bytes(password, enconding)).decode(enconding)
    header_auth = "{0}:{1}".format(user_id, encode_password)
    global header_data
    header_data =  {
        'Content-Type': 'application/octet-stream',
        'X-RPC-AUTHORIZATION' : header_auth,
        'X-RPC-DIRECTORY' : directory
    }
    global header_json
    header_json =  {
        'Content-Type': 'application/json',
        'X-RPC-AUTHORIZATION' : header_auth,
        'X-RPC-DIRECTORY' : directory
    }

#FR Post
def fr():
    response = requests.post(url=url, headers=header_data, data=upload_file)
    if response.ok:
        global result 
        result = json.loads(response.text)
        return result
    else:
        sys.exit(1)

#Event details
def event():
    global face
    face = result['identifiedFaces'][0]
    
    if "age" in str(face):
        age = int(face["attributes"]["age"]["age"])
    else:
        age = "none"
    if "gender" in str(face):
        gender = face["attributes"]["gender"]["gender"]
        gender_confidence = face["attributes"]["gender"]["confidence"]
    else:
        gender= "none"
        gender_confidence= "none"
    
    event = {
             "age" : age,
             "gender" : gender,
             "gender_confidence" : gender_confidence,
             "endTime" : endTime,
             "startTime" : startTime,                        
                        }
    return event 

#Image Crop
def crop(image_filename):
	#determine face coordinates
    paddingFactor = 0.25
    upload_file = Image.open(image_filename)
    upload_fileWidth = upload_file.size[0]
    upload_fileHeight = upload_file.size[1]
    offsetX = face["offsetX"]
    offsetY = face["offsetY"]
    faceWidth = face["attributes"]["dimension"]["width"]
    faceHeight = face["attributes"]["dimension"]["height"]
    faceWidthPadding = faceWidth * paddingFactor
    faceHeightPadding = faceHeight * paddingFactor
    #bounding box
    faceLeft = upload_fileWidth * offsetX - faceWidthPadding
    faceUpper = upload_fileHeight * offsetY - faceWidthPadding
    faceRight = faceLeft + faceWidth + faceWidthPadding * 2
    faceLower = faceUpper + faceHeight + faceWidthPadding * 2
    #cut out face from image
    faceImage = upload_file.crop((faceLeft, faceUpper, faceRight, faceLower))
    faceImage.save('crop.jpg', format='PNG')
    faceImageBytes = io.BytesIO()
    faceImage.save(faceImageBytes, format='PNG')
    return faceImageBytes
	
	
#Function to send image to a third party system
def cvos(faceImageBytes,url_cvos):
    #make the request 
    postresponse = requests.post(url=url_cvos, headers=header_data, data=faceImageBytes.getvalue())
    logger.info('CVOS Post' + ' status: ' + str(postresponse.status_code) + ' message: ' + str(postresponse.text) + ' url. called: ' + str(url_cvos))
        
#Function to send event details to a third party system
def ceventpersonid(event,url_get):    
        getresponse = requests.get(url_get, headers=header_json)
        if getresponse.ok:
            result = json.loads(getresponse.text)
            logger.info('[OK] Get Response Event' + ' status: ' + str(getresponse.status_code) + ' message: ' + str(getresponse.text) + ' url. called: ' + str(url_get))
            return result
            
            
        else:
            logger.info('[NOK] Get Response Event' + ' status: ' + str(getresponse.status_code) + ' message: ' + str(getresponse.text) + ' url. called: ' + str(url_get))
            return false
			
def eventupdate(result):
    if "events" in result:
        arrEvts = result["events"]
        for item in arrEvts:
            personid = item["personId"]
            url = base_url_event + "person/" + personid                    
            #Make the request to update Events
            response = requests.put(url=url, headers=header_json, data=json.dumps(event))
            logger.info('[OK] Event updated' + ' status: ' + str(response.status_code) + ' message: ' + str(response.text) + ' url. called: ' + str(url_get))
    else:
        logger.info('[NOK] No events details found')
					
          

if __name__ == '__main__':
    logger.info("Starting process...")
    start_time = datetime.now()
    try:
        checkimage()
        createHeaders(user_id, password, directory)    
        fr()
        event= event()
        faceImageBytes= crop(image_filename)
        cvos(faceImageBytes,url_cvos)
        result= ceventpersonid(event,url_get)
        eventupdate(result)
        end_time = datetime.now()
        elapsed_time = end_time - start_time
        logger.info('...ending process. Time slapsed {}'.format(elapsed_time))
    except Exception as e:
        logging.error('An error has ocurred. {}'.format(e))
